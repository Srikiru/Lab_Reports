Lab: DOM XSS in document.write sink using source location.search
link:https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink
Severity:High

üìù Description
This lab demonstrates a DOM-based Cross-Site Scripting (XSS) vulnerability arising from unsafe handling of user input in client-side JavaScript. Specifically, the application uses the document.write function to insert content into the page, incorporating data directly from location.search (the URL's query string) without proper sanitization.
portswigger.net
When a user performs a search, their query is appended to the URL as a parameter. The JavaScript function trackSearch(query) retrieves this parameter and writes an <img> tag to the page using document.write, embedding the unsanitized user input. This approach allows attackers to inject malicious scripts by manipulating the URL, leading to potential XSS attacks.
medium.com
portswigger.net

‚ö†Ô∏è Impact
Exploiting this vulnerability enables attackers to execute arbitrary JavaScript in the context of the victim's browser session. Potential consequences include:

1.)Session Hijacking: Stealing session cookies to impersonate users.

2.)Credential Theft: Capturing usernames and passwords entered by users.

3.)Phishing Attacks: Redirecting users to malicious sites or displaying fake login forms.

4.)Unauthorized Actions: Performing actions on behalf of users without their consent.

Such attacks compromise user trust and can lead to significant security breaches.


‚úÖ Recommendations
To mitigate DOM-based XSS vulnerabilities:

1.)Avoid Using document.write: Refrain from using document.write for dynamic content insertion. Instead, use safer methods like textContent or setAttribute.

2.)Sanitize User Input: Implement robust input validation and sanitization to ensure that user-supplied data does not contain malicious code.

3.)Use Context-Aware Encoding: Encode data appropriately based on the context in which it is inserted (e.g., HTML, JavaScript, URL).

4.)Implement Content Security Policy (CSP): Deploy CSP headers to restrict the execution of unauthorized scripts.

5.)Regular Security Audits: Conduct periodic code reviews and security assessments to identify and remediate vulnerabilities.


